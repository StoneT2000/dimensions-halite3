import { Design, Match, MatchConfigs, Station } from '..';
import { Logger, LoggerLEVEL } from '../Logger';
export declare type DimensionConfigs = {
    activateStation?: boolean;
    observe?: boolean;
};
/**
 * @class Dimension
 * @classdesc The Dimension framework for intiating a `Design` to then run `Matches` on. Interacts with `Match` class
 * only
 *
 * @param loggingLevel - Specified logging level applied to entire Dimension, including the associated design and sets
 * the defaults for all future `matches`, `matchEngines` and `agents`
 */
export declare class Dimension {
    design: Design;
    loggingLevel: LoggerLEVEL;
    matches: Array<Match>;
    static id: number;
    name: string;
    id: number;
    log: Logger;
    defaultMatchConfigs: MatchConfigs;
    static Station: Station;
    constructor(design: Design, name?: string, loggingLevel?: LoggerLEVEL, configs?: DimensionConfigs);
    /**
     * Create a match with the given files with the given unique name. It rejects if a fatal error occurs and resolves
     * with the initialized `match` object as specified by the `Design` of this `Dimension`
     *
     * @param files - List of files to use to generate agents and use for a new match
     * @param matchOptions - Options for the created match
     * @param configs - Configurations that are `Design` dependent
     */
    createMatch(files: Array<string> | Array<{
        file: string;
        name: string;
    }>, configs?: MatchConfigs): Promise<Match>;
    /**
     * Runs a match with the given files with the given unique name. It rejects if a fatal error occurs and resolves
     * with the results of the match as specified by the `Design` of this `Dimension`
     *
     * @param files - List of files to use to generate agents and use for a new match
     * @param matchOptions - Options for the created match
     * @param configs - Configurations that are `Design` dependent. These configs are passed into `Design.initialize`
     * `Design.update` and `Design.storeResults`
     */
    runMatch(files: Array<string> | Array<{
        file: string;
        name: string;
    }>, configs?: MatchConfigs): Promise<unknown>;
}
/**
 * Creates a dimension for use to start matches, run tournaments, etc.
 * @param design The design to use
 * @param name The optional name of the dimension
 */
export declare function create(design: Design, name?: string, loggingLevel?: LoggerLEVEL, configs?: DimensionConfigs): Dimension;
