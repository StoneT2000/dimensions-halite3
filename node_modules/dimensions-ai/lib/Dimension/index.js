"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var __1 = require("..");
var Logger_1 = require("../Logger");
/**
 * @class Dimension
 * @classdesc The Dimension framework for intiating a `Design` to then run `Matches` on. Interacts with `Match` class
 * only
 *
 * @param loggingLevel - Specified logging level applied to entire Dimension, including the associated design and sets
 * the defaults for all future `matches`, `matchEngines` and `agents`
 */
var Dimension = /** @class */ (function () {
    function Dimension(design, name, loggingLevel, configs) {
        if (loggingLevel === void 0) { loggingLevel = Logger_1.Logger.LEVEL.INFO; }
        if (configs === void 0) { configs = {
            activateStation: true,
            observe: true
        }; }
        this.design = design;
        this.loggingLevel = loggingLevel;
        this.matches = [];
        this.id = 0;
        this.log = new Logger_1.Logger();
        this.defaultMatchConfigs = { loggingLevel: Logger_1.Logger.LEVEL.INFO };
        if (configs.activateStation === true && Dimension.Station == null) {
            Dimension.Station = new __1.Station('Dimension Station', [], Logger_1.Logger.LEVEL.INFO);
        }
        this.log.level = loggingLevel;
        this.defaultMatchConfigs.loggingLevel = loggingLevel;
        this.design._setLogLevel(loggingLevel);
        if (name) {
            this.name = name;
        }
        else {
            this.name = "dimension_" + Dimension.id;
        }
        this.id = Dimension.id;
        this.log.detail("Created Dimension: " + this.name);
        Dimension.id++;
        // make the station observe this dimension when this dimension is created
        if (configs.observe === true)
            Dimension.Station.observe(this);
        this.defaultMatchConfigs.dimensionID = this.id;
    }
    /**
     * Create a match with the given files with the given unique name. It rejects if a fatal error occurs and resolves
     * with the initialized `match` object as specified by the `Design` of this `Dimension`
     *
     * @param files - List of files to use to generate agents and use for a new match
     * @param matchOptions - Options for the created match
     * @param configs - Configurations that are `Design` dependent
     */
    Dimension.prototype.createMatch = function (files, configs) {
        if (configs === void 0) { configs = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                        var matchConfigs, match, error_1;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!files.length)
                                        reject(new __1.FatalError('No files provided for match'));
                                    matchConfigs = __assign({}, this.defaultMatchConfigs);
                                    Object.assign(matchConfigs, configs);
                                    if (typeof files[0] === 'string') {
                                        match = new __1.Match(this.design, files, matchConfigs);
                                    }
                                    else {
                                        match = new __1.Match(this.design, files, matchConfigs);
                                    }
                                    this.matches.push(match);
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([1, 3, , 4]);
                                    return [4 /*yield*/, match.initialize()];
                                case 2:
                                    _a.sent();
                                    return [3 /*break*/, 4];
                                case 3:
                                    error_1 = _a.sent();
                                    reject(error_1);
                                    return [3 /*break*/, 4];
                                case 4:
                                    // TODO: Add a automatic match resolve that removes match from dimension's own list of matches
                                    resolve(match);
                                    return [2 /*return*/];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Runs a match with the given files with the given unique name. It rejects if a fatal error occurs and resolves
     * with the results of the match as specified by the `Design` of this `Dimension`
     *
     * @param files - List of files to use to generate agents and use for a new match
     * @param matchOptions - Options for the created match
     * @param configs - Configurations that are `Design` dependent. These configs are passed into `Design.initialize`
     * `Design.update` and `Design.storeResults`
     */
    Dimension.prototype.runMatch = function (files, configs) {
        if (configs === void 0) { configs = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                        var matchConfigs, match, results, error_2;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    _a.trys.push([0, 3, , 4]);
                                    if (!files.length)
                                        reject(new __1.FatalError('No files provided for match'));
                                    matchConfigs = __assign({}, this.defaultMatchConfigs);
                                    Object.assign(matchConfigs, configs);
                                    match = void 0;
                                    if (typeof files[0] === 'string') {
                                        match = new __1.Match(this.design, files, matchConfigs);
                                    }
                                    else {
                                        match = new __1.Match(this.design, files, matchConfigs);
                                    }
                                    this.matches.push(match);
                                    // Initialize match with initialization configuration
                                    return [4 /*yield*/, match.initialize()];
                                case 1:
                                    // Initialize match with initialization configuration
                                    _a.sent();
                                    return [4 /*yield*/, match.run()];
                                case 2:
                                    results = _a.sent();
                                    // Resolve the results
                                    resolve(results);
                                    return [3 /*break*/, 4];
                                case 3:
                                    error_2 = _a.sent();
                                    reject(error_2);
                                    return [3 /*break*/, 4];
                                case 4: return [2 /*return*/];
                            }
                        });
                    }); })];
            });
        });
    };
    Dimension.id = 0;
    // Default station for current node instance
    Dimension.Station = null;
    return Dimension;
}());
exports.Dimension = Dimension;
/**
 * Creates a dimension for use to start matches, run tournaments, etc.
 * @param design The design to use
 * @param name The optional name of the dimension
 */
function create(design, name, loggingLevel, configs) {
    return new Dimension(design, name, loggingLevel, configs);
}
exports.create = create;
//# sourceMappingURL=index.js.map