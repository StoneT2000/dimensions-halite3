/// <reference types="node" />
import { LoggerLEVEL } from "..";
import { ChildProcess } from "child_process";
export declare enum AgentStatus {
    UNINITIALIZED = 0,
    READY = 1,
    RUNNING = 2,
    CRASHED = 3,
    KILLED = 4
}
export declare type agentID = number;
/**
 * @class Agent
 * @classdesc Reads in a file source for the code and creates an `Agent` for use in the `MatchEngine` and `Match`
 */
export declare class Agent {
    id: agentID;
    name: string;
    src: string;
    cmd: string;
    process: ChildProcess;
    status: AgentStatus;
    currentMoveCommands: Array<string>;
    creationDate: Date;
    currentMovePromise: Promise<void>;
    currentMoveResolve: Function;
    currentMoveReject: Function;
    agentTimeStep: number;
    private log;
    constructor(file: string, options: any);
    _setupMove(): void;
    /**
     * Generates a list of agents for use
     * @param files List of files to use to make agents
     * @param names List of optional names for each agent, if empty, defaults to default agent names
     */
    static generateAgents(files: Array<String> | Array<{
        file: string;
        name: string;
    }>, loggingLevel: LoggerLEVEL): Array<Agent>;
}
