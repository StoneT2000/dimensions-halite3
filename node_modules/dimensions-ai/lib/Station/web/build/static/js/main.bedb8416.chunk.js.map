{"version":3,"sources":["UserContext.tsx","components/Header/index.tsx","components/layouts/container.tsx","components/layouts/default.tsx","actions/dimensions.ts","components/DimensionCard/index.tsx","pages/MainPage/index.tsx","actions/match.ts","components/MatchActionButton/index.tsx","pages/DimensionsPage/index.tsx","pages/MatchPage/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["UserContext","React","createContext","UserProvider","Provider","Consumer","Menu","SubMenu","Header","props","useHistory","useState","key","setKey","useContext","onClick","e","selectedKeys","mode","className","Item","to","rel","Container","children","DefaultLayout","getDimension","a","id","Promise","resolve","reject","axios","get","process","then","res","data","dimensions","dimension","catch","error","getMatchesFromDimension","dimensionID","matches","getMatchFromDimension","matchID","match","DimensionCard","name","design","length","MainPage","setDimensions","useEffect","console","log","map","dim","runMatch","post","stopMatch","reRunMatch","removeMatch","MatchActionButton","btns","matchStatus","loading","disabled","Tree","TreeNode","DimensionsPage","params","useParams","history","setDimension","setMatches","setData","columns","title","dataIndex","render","location","pathname","mapMatchStatusToName","status","Array","newData","index","matchname","creationdate","creationDate","action","loggingLevel","dataSource","DimensionsListPage","MatchPage","setMatch","agent","mapAgentStatusToName","agents","src","agentname","timeStep","results","target","href","App","loggedIn","user","setUser","value","path","exact","component","DimensionPage","Boolean","window","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.bedb8416.chunk.js","sourcesContent":["import React from 'react'\n\n// set UserContext and add type\nconst UserContext = React.createContext({} as {user: any, setUser: Function});\n\nexport const UserProvider = UserContext.Provider\nexport const UserConsumer = UserContext.Consumer\nexport default UserContext\n","import React, {useState, useContext, useEffect} from 'react';\nimport { Link } from 'react-router-dom';\nimport { Menu, message, Button } from 'antd';\nimport './index.scss';\nimport { useHistory } from 'react-router-dom';\n\nimport UserContext from '../../UserContext'\nconst { SubMenu } = Menu;\nfunction Header(props: any) {\n  let history = useHistory();\n  const [key, setKey] = useState();\n\n  const userHooks = useContext(UserContext);\n\n\n  const handleClick = (e: any) => {\n    setKey(e.key);\n  };\n\n  return (\n    <Menu onClick={handleClick} selectedKeys={key} mode=\"horizontal\" className=\"Header\">\n      <Menu.Item className=\"logo\">\n        {/* <Link to=\"/\"><img src={logo} /></Link> */}\n      </Menu.Item>\n      <Menu.Item key=\"home\">\n        <Link to=\"/\" rel=\"noopener noreferrer\">\n          Home\n        </Link>\n      </Menu.Item>\n      <Menu.Item key=\"dimensions\">\n        <Link to=\"/dimensions\" rel=\"noopener noreferrer\">\n          Dimensions\n        </Link>\n      </Menu.Item>\n      <Menu.Item className=\"empty\">\n      </Menu.Item>\n    </Menu>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport './container.scss';\nfunction Container(props:any) {\n  return(\n    <div className='container'>\n      <main className='content'>\n        {props.children}\n      </main>\n    </div>\n  )\n}\n\nexport default Container;\n","import React from \"react\";\nimport Header from \"../Header\";\nimport Container from \"./container\";\n\nfunction DefaultLayout(props: any){\n    return (\n      <div>\n      <Header></Header>\n        <Container>\n          {props.children}\n        </Container>\n      </div>\n    );\n}\n\nexport default DefaultLayout;\n","import axios, { AxiosResponse } from 'axios';\nimport { Dimension } from '../../../../Dimension';\nimport { Match } from '../../../../Match';\n\n\n// Returns all dimensions if no input\nexport const getDimension = async (id: number = -1): Promise<Array<Dimension> | Dimension> => {\n  return new Promise((resolve, reject) => {\n    axios.get(process.env.REACT_APP_API + '/api/dimensions/' + (id === -1 ? '' : id)).then((res: AxiosResponse) => {\n      if (id === -1) {\n        resolve(res.data.dimensions);\n      }\n      else {\n        resolve(res.data.dimension);\n      }\n    }).catch((error) => {\n      reject(error);\n    })\n  })\n}\n\n\nexport const getMatchesFromDimension = async (dimensionID: number): Promise<Array<Match>> => {\n  return new Promise((resolve, reject) => {\n    axios.get(process.env.REACT_APP_API + `/api/dimensions/${dimensionID}/match`).then((res: AxiosResponse) => {\n      resolve(res.data.matches);\n    }).catch((error) => {\n      reject(error);\n    })\n  })\n}\nexport const getMatchFromDimension = async (dimensionID: number, matchID: number): Promise<Match> => {\n  return new Promise((resolve, reject) => {\n    axios.get(process.env.REACT_APP_API + `/api/dimensions/${dimensionID}/match/${matchID}`).then((res: AxiosResponse) => {\n      resolve(res.data.match);\n    }).catch((error) => {\n      reject(error);\n    })\n  })\n}","import React, { useState, useEffect } from 'react';\n\nimport './index.scss';\nimport { Dimension } from '../../../../../Dimension';\nimport { Link } from 'react-router-dom';\n\nconst DimensionCard = (props: {dimension: Dimension}) => {\n\n  return (\n    <div className=\"DimensionCard\">\n      <Link to={'/dimensions/' + props.dimension.id}><h2 className='title'>{props.dimension.name}</h2></Link>\n      <p className='matches'>Design: {props.dimension.design.name}</p>\n      <p className='matches'>Matches: {props.dimension.matches.length}</p>\n    </div>\n  )\n}\n\nexport default DimensionCard;\n","import React, { useEffect, useState } from 'react';\nimport './index.scss';\nimport DefaultLayout from \"../../components/layouts/default\";\nimport { getDimension, getMatchesFromDimension } from '../../actions/dimensions';\nimport DimensionCard from '../../components/DimensionCard';\nimport { Dimension } from '../../../../../Dimension';\nfunction MainPage(props: any) {\n  const [dimensions, setDimensions] = useState<Array<Dimension>>([]);\n  useEffect(() => {\n    getDimension().then((res: any) => {\n      console.log(res);\n      //@ts-ignore\n      setDimensions(res);\n    }).catch((error) => {\n      console.error(error);\n    })\n  }, []);\n  return (\n    <DefaultLayout>\n      <div className='Main'>\n        <div className='hero'>\n          <h1 id='title'>Dimensions Station</h1>\n          <p className='subtext'>Observe your Dimensions, Matches, and Tournaments, and basically everything</p>\n          {\n            dimensions.length &&\n              dimensions.map((dim: Dimension) => {\n                return (\n                  <DimensionCard dimension={dim}/>\n                )\n              })\n          }\n        </div>\n      </div>\n    </DefaultLayout>\n  );\n}\n\nexport default MainPage\n","import axios, { AxiosResponse } from 'axios';\nimport { Dimension } from '../../../../Dimension';\nimport { Match } from '../../../../Match';\n\n\n// Returns all dimensions if no input\nexport const getDimension = async (id: number = -1): Promise<Array<Dimension> | Dimension> => {\n  return new Promise((resolve, reject) => {\n    axios.get(process.env.REACT_APP_API + '/api/dimensions/' + (id === -1 ? '' : id)).then((res: AxiosResponse) => {\n      if (id === -1) {\n        resolve(res.data.dimensions);\n      }\n      else {\n        resolve(res.data.dimension);\n      }\n    }).catch((error) => {\n      reject(error);\n    })\n  })\n}\n\n\nexport const runMatch = async (dimensionID:number, matchID: number): Promise<any> => {\n  return new Promise((resolve, reject) => {\n    axios.post(process.env.REACT_APP_API + `/api/dimensions/${dimensionID}/match/${matchID}/run`).then((res: AxiosResponse) => {\n      console.log(res);\n      resolve(res);\n    }).catch((error) => {\n      reject(error);\n    })\n  })\n}\n\nexport const stopMatch = async (dimensionID:number, matchID: number): Promise<any> => {\n  return new Promise((resolve, reject) => {\n    axios.post(process.env.REACT_APP_API + `/api/dimensions/${dimensionID}/match/${matchID}/stop`).then((res: AxiosResponse) => {\n      console.log(res);\n      resolve(res);\n    }).catch((error) => {\n      reject(error);\n    })\n  })\n}\n\nexport const reRunMatch = async (dimensionID:number, matchID: number): Promise<any> => {\n  return new Promise((resolve, reject) => {\n    axios.post(process.env.REACT_APP_API + `/api/dimensions/${dimensionID}/match/${matchID}/rerun`).then((res: AxiosResponse) => {\n      console.log(res);\n      resolve(res);\n    }).catch((error) => {\n      reject(error);\n    })\n  })\n}\n\nexport const removeMatch = async (dimensionID:number, matchID: number): Promise<any> => {\n  return new Promise((resolve, reject) => {\n    axios.post(process.env.REACT_APP_API + `/api/dimensions/${dimensionID}/match/${matchID}/remove`).then((res: AxiosResponse) => {\n      console.log(res);\n      resolve(res);\n    }).catch((error) => {\n      reject(error);\n    })\n  })\n}\n","import React, { useState, useEffect } from 'react';\nimport { runMatch, stopMatch, reRunMatch, removeMatch } from '../../actions/match';\nimport { Button } from 'antd';\nimport { Match } from '../../../../../Match';\nimport './index.scss';\nconst MatchActionButton = (props:{match: Match}) => {\n\n  let btns;\n  switch (props.match.matchStatus) {\n    case 0: // Uninitialized\n      btns = <Button loading={true}>Run</Button>\n      break;\n    case 1: // Ready\n      btns = <Button onClick={() => {runMatch(props.match.dimensionID, props.match.id)}}>Run</Button>\n      break;\n    case 2: // Running\n      btns = <Button onClick={() => {stopMatch(props.match.dimensionID, props.match.id)}} disabled>Stop</Button>\n      break;\n    case 3: // Stopped\n      btns = <Button onClick={() => {runMatch(props.match.dimensionID, props.match.id)}}>Run</Button>\n      break;\n    case 4: // Finished\n      btns = [<Button onClick={() => {removeMatch(props.match.dimensionID, props.match.id)}} disabled>Remove</Button>,\n        <Button onClick={() => {reRunMatch(props.match.dimensionID, props.match.id)}} disabled>Re-run</Button>\n      ]\n      break;\n    case 5: // Error\n      btns = [<Button onClick={() => {removeMatch(props.match.dimensionID, props.match.id)}} disabled>Remove</Button>,\n        <Button onClick={() => {reRunMatch(props.match.dimensionID, props.match.id)}} disabled>Re-run</Button>\n      ]\n      break;\n    default:\n      btns = 'Error';\n  }\n  return (\n    <div className='MatchActionButtons'>\n      {btns}\n    </div>\n  )\n}\n\nexport default MatchActionButton\n","import React, { useEffect, useState } from 'react';\nimport './index.scss';\nimport { Button, Table } from 'antd';\nimport { Tree } from 'antd';\n\nimport DefaultLayout from '../../components/layouts/default';\nimport { useParams, useHistory, Link } from 'react-router-dom';\n\nimport { runMatch, stopMatch } from '../../actions/match';\nimport { getDimension, getMatchesFromDimension } from '../../actions/dimensions';\n\n// NOTE!! Can import outside src as long as we dont use instanceof dimension or actually use it, we can just it for typings\nimport { Dimension } from '../../../../../Dimension';\nimport { Match, MatchStatus } from '../../../../../Match';\nimport DimensionCard from '../../components/DimensionCard';\nimport MatchActionButton from '../../components/MatchActionButton';\n\nconst { TreeNode } = Tree;\n\nfunction DimensionsPage(props: any) {\n  const params: any = useParams();\n  const history: any = useHistory();\n  const [dimension, setDimension] = useState<Dimension>();\n  const [matches, setMatches] = useState<Array<Match>>([]);\n  const [data, setData] = useState<Array<any>>([]);\n  const columns = [\n    {\n      title: 'Match Name',\n      dataIndex: 'matchname',\n      render: (match: Match) => <Link to={`${history.location.pathname}/matches/${match.id}`}>{match.name}</Link>,\n    },\n    {\n      title: 'Creation Date',\n      dataIndex: 'creationdate',\n    },\n    {\n      title: 'Status',\n      dataIndex: 'status',\n    },\n    {\n      title: 'Action',\n      dataIndex: 'action',\n      render: (match: Match) => {\n        //@ts-ignore\n        return (<MatchActionButton match={match} />)\n      }\n    }\n  ];\n  const mapMatchStatusToName = (status: number): string => {\n    switch(status) {\n      case 0:\n        return 'Uninitialized';\n      case 1:\n        return 'Ready';\n      case 2:\n        return 'Running';\n      case 3:\n        return 'Stopped';\n      case 4:\n        return 'Finished';\n      case 5:\n        return 'Error / Crash';\n      default:\n        return 'Unknown'\n    }\n  }\n  useEffect(() => {\n    console.log(history);\n    if (params.id) {\n      getDimension(params.id).then((res) => {\n        if (!(res instanceof Array))  {\n          setDimension(res);\n          getMatchesFromDimension(res.id).then((res) => {\n            setMatches(res);\n            let newData = res.map((match: Match, index) => {\n              return {\n                key: index,\n                matchname: match,\n                creationdate: match.creationDate,\n                status: mapMatchStatusToName(match.matchStatus),\n                action: match\n              }\n            });\n            setData(newData);\n          })\n        }\n        else {\n          console.error(\"something wrong happened\");\n        }\n      })\n    }\n  }, []);\n  return (\n    <DefaultLayout>\n      <div className='DimensionPage'>\n        {dimension &&\n          <div>\n            <h2>{dimension.name}</h2>\n            <h4 className='meta-data-title'>Metadata</h4>\n            <p className='meta-data'>\n              id: {dimension.id} <br />\n              Used Design: { dimension.design.name } <br />\n              Logging Level: {dimension.loggingLevel}\n            </p>\n            <h4>Ongoing Matches</h4>\n            <Table className='matchTable'\n              columns={columns}\n              dataSource={data}\n            />\n          </div> \n        }\n      </div>\n    </DefaultLayout>\n  );\n}\n\nfunction DimensionsListPage() {\n  const params: any = useParams();\n  const [dimensions, setDimensions] = useState<Array<Dimension>>([]);\n  useEffect(() => {\n    getDimension().then((res) => {\n      if (res instanceof Array)  {\n        setDimensions(res);\n      }\n      else {\n        console.error(\"something wrong happened\");\n      }\n    })\n  }, []);\n  return (\n    <DefaultLayout>\n      <div className='DimensionPage'>\n        <h2>Dimensions Observed</h2>\n        {dimensions.length &&\n          dimensions.map((dimension: Dimension) => {\n            return (\n              <DimensionCard key={dimension.id} dimension={dimension}/>\n            )\n          })\n        }\n      </div>\n    </DefaultLayout>\n  );\n}\nDimensionsPage.DimensionsListPage = DimensionsListPage;\nexport default DimensionsPage\n","import React, { useEffect, useState } from 'react';\nimport './index.scss';\nimport { Button, Table } from 'antd';\nimport { Tree } from 'antd';\n\nimport DefaultLayout from '../../components/layouts/default';\nimport { useParams, useHistory, Link } from 'react-router-dom';\n\nimport { getMatchFromDimension } from '../../actions/dimensions';\n\n// NOTE!! Can import outside src as long as we dont use instanceof dimension or actually use it, we can just it for typings\nimport { Dimension } from '../../../../../Dimension';\nimport { Match } from '../../../../../Match';\nimport { Agent, AgentStatus } from '../../../../../Agent';\nimport { ChildProcess } from 'child_process';\n\nconst { TreeNode } = Tree;\n\nfunction MatchPage(props: any) {\n  const params: any = useParams();\n  const history: any = useHistory();\n  const [dimension, setDimension] = useState<Dimension>();\n  const [match, setMatch] = useState<Match>();\n  const [data, setData] = useState<Array<any>>([]);\n  const columns = [\n    {\n      title: 'Agent Name',\n      dataIndex: 'agentname',\n      render: (agent: Agent) => <Link to={`${history.location.pathname}/agents/${agent.id}`}>{agent.name}</Link>,\n    },\n    {\n      title: 'Creation Date',\n      dataIndex: 'creationdate',\n    },\n    {\n      title: 'Source',\n      dataIndex:'src'\n    },\n    {\n      title: 'Status',\n      dataIndex: 'status',\n      render: (status: AgentStatus) => <span>{mapAgentStatusToName(status)}</span>\n    },\n  ];\n  const mapAgentStatusToName = (status: number): string => {\n    switch(status) {\n      case 0:\n        return 'Uninitialized';\n      case 1:\n        return 'Ready';\n      case 2:\n        return 'Running';\n      case 3:\n        return 'Crashed';\n      case 4:\n        return 'Killed / Finished';\n      default:\n        return 'Unknown'\n    }\n  }\n  useEffect(() => {\n    console.log(history);\n    if (params.matchID) {\n      getMatchFromDimension(params.id, params.matchID).then((res) => {\n        if (!(res instanceof Array))  {\n          setMatch(res);\n          console.log(res.agents);\n          let newData = res.agents.map((agent) => {\n            return {\n              src: agent.src,\n              agentname: agent,\n              creationdate: agent.creationDate,\n              status: agent.status\n            }\n          })\n          setData(newData);\n        }\n        else {\n          console.error(\"something wrong happened\");\n        }\n      })\n    }\n  }, []);\n  return (\n    <DefaultLayout>\n      <div className='DimensionPage'>\n        {match &&\n          <div>\n            <h2>{match.name}</h2>\n            <h4 className='meta-data-title'>Metadata</h4>\n            <p className='meta-data'>\n              id: {match.id} <br />\n              Used Design: { match.design.name } <br />\n              Creation Date: {match.creationDate} <br />\n              Match Status: {match.matchStatus} <br />\n              Time Step: {match.timeStep}\n            </p>\n            <h4>Match Results:</h4>\n            {match.results ? <a target='_blank' href={process.env.REACT_APP_API + `/api/dimensions/${params.id}/match/${params.matchID}/results`}>Results</a> : 'No results yet'}\n            <h4>Agents / Players</h4>\n            <Table className='agentTable'\n              columns={columns}\n              dataSource={data}\n            />\n          </div> \n        }\n      </div>\n    </DefaultLayout>\n  );\n}\n\nexport default MatchPage\n","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport { UserProvider } from './UserContext'\nimport './styles/index.scss';\n\nimport MainPage from './pages/MainPage';\nimport DimensionPage from './pages/DimensionsPage';\nimport MatchPage from './pages/MatchPage';\n\nfunction App() {\n  const [user, setUser] = useState({loggedIn: false});\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <UserProvider value={{user: user, setUser: setUser}}>\n            <Route path=\"/\" exact component={MainPage} />\n            <Route path=\"/dimensions\" exact component={DimensionPage.DimensionsListPage} />\n            <Route path=\"/dimensions/:id\" exact component={DimensionPage} />\n            <Route path=\"/dimensions/:id/matches/:matchID\" exact component={MatchPage} />\n            {/* <Route path=\"/register\" exact component={RegisterUser} />\n            <Route path=\"/login\" exact component={LoginUser} />\n            <Route path=\"/dashboard\" exact component={DashboardPage} />\n            <Route path=\"/explore\" exact render={() => <Explore />} />\n            <Route path=\"/confirm\" exact component={ConfirmEmailPage} /> */}\n          </UserProvider>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}