/**
 * This file defines error classes based on their semantic meaning. It abstracts away
 * HTTP status codes so they can be used in a RESTful way without worrying about a
 * consistent error interface.
 *
 * These classes descend from the base Error class, so they also automatically capture
 * stack traces--useful for debugging.
 */
/**
 * Base error class.
 *
 * Supports HTTP status codes and a custom message.
 */
export declare class HttpError extends Error {
    status: any;
    constructor(name: any, status: any, message?: any);
}
export declare class UserError extends HttpError {
    constructor(message: any);
}
export declare class BadRequest extends HttpError {
    constructor(message: any);
}
export declare class Unauthorized extends HttpError {
    constructor(message: any);
}
export declare class Forbidden extends HttpError {
    constructor(message: any);
}
export declare class NotFound extends HttpError {
    constructor(message: any);
}
export declare class Unprocessable extends HttpError {
    constructor(message: any);
}
export declare class InternalServerError extends HttpError {
    constructor(message: any);
}
export declare class NotImplemented extends HttpError {
    constructor(message: any);
}
/**
 * General error handling middleware. Attaches to Express so that throwing or calling next() with
 * an error ends up here and all errors are handled uniformly.
 */
export declare const errorHandler: (err: any, req: any, res: any, next: any) => void;
