"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var express_1 = __importDefault(require("express"));
var path_1 = __importDefault(require("path"));
var status_1 = __importDefault(require("./routes/api/status"));
var dimensions_1 = __importDefault(require("./routes/api/dimensions"));
var Logger_1 = require("../Logger");
var error = __importStar(require("./error"));
var cors_1 = __importDefault(require("cors"));
var Station = /** @class */ (function () {
    function Station(name, observedDimensions, loggingLevel) {
        var _this = this;
        if (name === void 0) { name = ''; }
        this.id = 0;
        this.port = 9000;
        this.webport = 3000;
        this.maxAttempts = 16;
        this.log = new Logger_1.Logger(Logger_1.Logger.LEVEL.INFO, 'Station Log');
        // set logging level
        this.log.level = loggingLevel;
        // store ID, set name and logger identifier
        this.id = Station._id;
        if (name) {
            this.name = name;
        }
        else {
            this.name = "Station_" + this.id;
        }
        Station._id++;
        this.log.identifier = this.name + ' Log';
        this.app = express_1.default(); // api app
        this.webapp = express_1.default(); // web app
        // CORS
        this.webapp.use(cors_1.default());
        this.app.use(cors_1.default());
        this.webapp.use(express_1.default.static(path_1.default.join(__dirname, 'web/build')));
        this.webapp.get('/*', function (req, res) {
            res.sendFile(path_1.default.join(__dirname, 'web/build', 'index.html'));
        });
        // Try to start up web app
        var webSuccessStart = function () {
            _this.log.infobar();
            _this.log.info("Running '" + _this.name + "' Web at http://localhost:" + _this.webport);
        };
        this.tryToListen(this.webapp, this.webport).then(function (port) {
            _this.webport = port;
            webSuccessStart();
        }).catch(function () {
            _this.log.error("Station Web: " + _this.name + ", couldn't find an open port after 16 attempts");
        });
        // store all observed dimensions
        if (observedDimensions instanceof Array) {
            this.app.set('dimensions', observedDimensions);
        }
        else {
            this.app.set('dimensions', [observedDimensions]);
        }
        // store in each request a data object
        var initReqData = function (req, res, next) {
            req.data = {};
            next();
        };
        this.app.use('/**/*', initReqData);
        /**
         * Link up routes
         * Status - Status of everything
         * Dimensions - Api to access all dimensions functions, match functions, etc.
         */
        this.app.use('/api/status', status_1.default);
        this.app.use('/api/dimensions', dimensions_1.default);
        // Set up error handler
        this.app.use(error.errorHandler);
        this.log.system("All middleware setup");
        // Successful start of app messages and setups
        var successStart = function () {
            _this.log.infobar();
            _this.log.info("Running '" + _this.name + "' API at port " + _this.port);
            _this.log.info("Observing dimensions: " + _this.app.get('dimensions').map(function (dim) { return dim.name; }));
        };
        this.tryToListen(this.app, this.port).then(function (port) {
            _this.port = port;
            successStart();
        }).catch(function () {
            _this.log.error("Station: " + _this.name + ", couldn't find an open port after 16 attempts");
        });
    }
    /**
     * Try to listen to this.maxAttempts ports
     */
    Station.prototype.tryToListen = function (app, startingPort) {
        return __awaiter(this, void 0, void 0, function () {
            var attempts;
            var _this = this;
            return __generator(this, function (_a) {
                attempts = 0;
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        _this.server = app.listen(startingPort).on('error', function () {
                            attempts++;
                            // this.log.warn(`${this.name} - Failed attempt ${attempts}`);
                            if (attempts < _this.maxAttempts) {
                                _this.tryToListen(app, startingPort + 1).then(function () {
                                    resolve(startingPort + 1);
                                });
                            }
                            else {
                                reject();
                            }
                        }).on('listening', function () {
                            resolve(startingPort);
                        });
                    })];
            });
        });
    };
    /**
     * Restart Station server / API
     */
    Station.prototype.restart = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        _this.log.warn("RESTARTING");
                        _this.server.close(function (err) {
                            if (err)
                                reject(err);
                            _this.tryToListen(_this.app, _this.port).then(resolve).catch(reject);
                        });
                    })];
            });
        });
    };
    Station.prototype.observe = function (dimension) {
        this.app.set('dimensions', __spreadArrays(this.app.get('dimensions'), [dimension]));
    };
    Station._id = 0;
    return Station;
}());
exports.Station = Station;
//# sourceMappingURL=index.js.map