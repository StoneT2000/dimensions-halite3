"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var __1 = require("..");
var MatchStatus;
(function (MatchStatus) {
    MatchStatus[MatchStatus["UNINITIALIZED"] = 0] = "UNINITIALIZED";
    MatchStatus[MatchStatus["READY"] = 1] = "READY";
    MatchStatus[MatchStatus["RUNNING"] = 2] = "RUNNING";
    MatchStatus[MatchStatus["STOPPED"] = 3] = "STOPPED";
    MatchStatus[MatchStatus["FINISHED"] = 4] = "FINISHED";
    MatchStatus[MatchStatus["ERROR"] = 5] = "ERROR"; // if error occurs, currently not used, but should be somehow integrated into the Match class, appearing when 
    // match stops by itself due to an error
})(MatchStatus = exports.MatchStatus || (exports.MatchStatus = {}));
/**
 * @class Match
 * @classdesc An match created using a `Design` and a list of `Agents`. The match can be started and stopped, and
 * statistics can be retrieved at any point in time. This can be extended if needed
 * @param design - The `Design` used
 * @param agents - List of agents used to create Match.
 * @param configs - Configurations that are passed to every run through initialize, update, and storeResults in the
 * given `Design`
 */
var Match = /** @class */ (function () {
    function Match(design, agentFiles, configs) {
        if (configs === void 0) { configs = {}; }
        this.design = design;
        this.agentFiles = agentFiles;
        this.configs = configs;
        this.idToAgentsMap = new Map();
        // The time step of the Match. All agents are coordinated against this timeStep
        this.timeStep = 0;
        this.log = new __1.Logger();
        this.matchStatus = MatchStatus.UNINITIALIZED;
        this.creationDate = new Date();
        if (configs.name) {
            this.name = configs.name;
        }
        else {
            this.name = "match_" + Match._id;
        }
        // set logging level to what was given
        if (configs.loggingLevel) {
            this.log.level = configs.loggingLevel;
        }
        this.log.identifier = this.name;
        this.dimensionID = configs.dimensionID;
        // store reference to the matchEngine used
        this.matchEngine = new __1.MatchEngine(this.design, this.log.level);
        this.id = Match._id;
        Match._id++;
    }
    /**
     * Initializes using this config dependeing on how `Design's` `initialize` is implemented
     * @param config - Configurations for initializtion
     * @returns a promise that resolves true/false if initialized correctly
     */
    Match.prototype.initialize = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                        var error_1;
                        var _this = this;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    _a.trys.push([0, 3, , 4]);
                                    this.log.infobar();
                                    this.log.info("Design: " + this.design.name + " | Initializing match: " + this.name);
                                    // Initialize agent files to agents, no names specified, and use the same logging level as this `match`
                                    this.agents = __1.Agent.generateAgents(this.agentFiles, this.log.level);
                                    this.agents.forEach(function (agent, index) {
                                        _this.idToAgentsMap.set(agent.id, agent);
                                    });
                                    // Initialize the matchEngine and get it ready to run and process I/O for agents
                                    return [4 /*yield*/, this.matchEngine.initialize(this.agents, this)];
                                case 1:
                                    // Initialize the matchEngine and get it ready to run and process I/O for agents
                                    _a.sent();
                                    // Initialize match according to `design` by delegating intialization task to the enforced `design`
                                    return [4 /*yield*/, this.design.initialize(this, this.configs.initializeConfig)];
                                case 2:
                                    // Initialize match according to `design` by delegating intialization task to the enforced `design`
                                    _a.sent();
                                    // remove initialized status and set as READY
                                    // TODO: add more security checks etc. before marking match as ready to run
                                    this.matchStatus = MatchStatus.READY;
                                    resolve(true);
                                    return [3 /*break*/, 4];
                                case 3:
                                    error_1 = _a.sent();
                                    reject(error_1);
                                    return [3 /*break*/, 4];
                                case 4: return [2 /*return*/];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Runs this match to completion. Resolves / returns the match results when done
     */
    Match.prototype.run = function () {
        return __awaiter(this, void 0, void 0, function () {
            var status, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.next()];
                    case 1:
                        status = _b.sent();
                        _b.label = 2;
                    case 2:
                        if (status != MatchStatus.FINISHED) return [3 /*break*/, 0];
                        _b.label = 3;
                    case 3:
                        _a = this;
                        return [4 /*yield*/, this.getResults()];
                    case 4:
                        _a.results = _b.sent();
                        // TODO: Perhaps add a cleanup status if cleaning up processes takes a long time
                        return [4 /*yield*/, this.stopAndCleanUp()];
                    case 5:
                        // TODO: Perhaps add a cleanup status if cleaning up processes takes a long time
                        _b.sent();
                        return [2 /*return*/, this.results];
                }
            });
        });
    };
    /**
     * Next function. Moves match forward by one timestep. Resolves with the match status
     */
    Match.prototype.next = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                        var commands, status_1;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!(this.matchEngine.engineOptions.commandStreamType === __1.COMMAND_STREAM_TYPE.SEQUENTIAL)) return [3 /*break*/, 3];
                                    return [4 /*yield*/, this.matchEngine.getCommands(this)];
                                case 1:
                                    commands = _a.sent();
                                    return [4 /*yield*/, this.design.update(this, commands, this.configs.updateConfig)];
                                case 2:
                                    status_1 = _a.sent();
                                    // default status is running if no status returned
                                    if (!status_1) {
                                        this.matchStatus = MatchStatus.RUNNING;
                                    }
                                    else {
                                        this.matchStatus = status_1;
                                    }
                                    // update timestep now
                                    this.timeStep += 1;
                                    resolve(status_1);
                                    return [3 /*break*/, 4];
                                case 3:
                                    if (this.matchEngine.engineOptions.commandStreamType === __1.COMMAND_STREAM_TYPE.PARALLEL) {
                                        // with a parallel structure, the `Design` updates the match after each command sequence, delimited by \n
                                        // this means agents end up sending commands using out of sync state information, so the `Design` would need to 
                                        // adhere to this. Possibilities include stateless designs, or heavily localized designs where out of 
                                        // sync states wouldn't matter much
                                    }
                                    _a.label = 4;
                                case 4: return [2 /*return*/];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Stops at the nearest timestep available
     *
     * Notes:
     * - If design uses a PARALLEL match engine, stopping behavior can be a little unpredictable
     * - If design uses a SEQUENTIAL match engine, a stop will result in ensuring all agents complete all their actions up
     *   to a coordinated stopping `timeStep`
     */
    Match.prototype.stop = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    Match.prototype.stopAndCleanUp = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.matchEngine.killAndClean(this)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Match.prototype.getResults = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                        var res, error_2;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    _a.trys.push([0, 2, , 3]);
                                    return [4 /*yield*/, this.design.getResults(this, this.configs.storeResultConfig)];
                                case 1:
                                    res = _a.sent();
                                    resolve(res);
                                    return [3 /*break*/, 3];
                                case 2:
                                    error_2 = _a.sent();
                                    reject(error_2);
                                    return [3 /*break*/, 3];
                                case 3: return [2 /*return*/];
                            }
                        });
                    }); })];
            });
        });
    };
    // sends a message string to every agent
    Match.prototype.sendAll = function (message) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var sendPromises = [];
                        _this.agents.forEach(function (agent) {
                            sendPromises.push(_this.send(message, agent));
                        });
                        Promise.all(sendPromises).then(function () {
                            // if all promises resolve, we sent all messages
                            resolve(true);
                        }).catch(function (error) {
                            reject(error);
                        });
                    })];
            });
        });
    };
    /**
     * Functional method for sending a message string to a particular agent. Returns a promise that resolves true if
     * succesfully sent
     * @param message
     * @param receiver - receiver of message can be specified by the `Agent` or it's agentID (a number)
     */
    Match.prototype.send = function (message, receiver) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (receiver instanceof __1.Agent) {
                    return [2 /*return*/, this.matchEngine.send(this, message, receiver.id)];
                }
                else {
                    return [2 /*return*/, this.matchEngine.send(this, message, receiver)];
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Throw an error within the `Match`, indicating an Agent tried a command that was forbidden in the match according
     * to a `Design`
     * Examples are misuse of an existing command or using incorrect commands
     * @param agentID - the misbehaving agent's ID
     * @param error - The error
     */
    Match.prototype.throw = function (agentID, error) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                // Fatal errors are logged and end the whole match
                // TODO: Try to use `instanceof`
                if (error.name === 'Dimension.FatalError') {
                    console.log('FATAL');
                    this.stopAndCleanUp().then(function () {
                        throw new __1.FatalError(_this.idToAgentsMap.get(agentID).name + " | " + error.message);
                    });
                }
                if (error.name === 'Dimension.MatchError') {
                    this.log.warn(this.idToAgentsMap.get(agentID).name + " | " + error);
                }
                return [2 /*return*/];
            });
        });
    };
    Match._id = 0;
    return Match;
}());
exports.Match = Match;
//# sourceMappingURL=index.js.map