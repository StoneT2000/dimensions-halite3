"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ParsedCommand = /** @class */ (function () {
    function ParsedCommand(str, delimiter) {
        this.str = str;
        this.delimiter = delimiter;
        this.str = str;
        this.contents = str.split(this.delimiter);
        // remove the last element if its empty string
        if (this.contents[this.contents.length - 1] === '') {
            this.contents = this.contents.slice(0, this.contents.length - 1);
        }
        this.index = 0;
    }
    ParsedCommand.prototype._nextStr = function () {
        if (this.index < this.contents.length) {
            return this.contents[this.index++];
        }
        else {
            throw new Error("No more contents to consume from line");
        }
    };
    // Returns the remainder of the line as an array of integers
    ParsedCommand.prototype.nextIntArr = function () {
        if (this.index < this.contents.length) {
            var remainder = this.contents.slice(this.index, this.contents.length).map(function (val) { return parseInt(val); });
            return remainder;
        }
        else {
            throw new Error("No more contents to consume from line");
        }
    };
    ParsedCommand.prototype.nextInt = function () {
        var str = this._nextStr();
        return parseInt(str);
    };
    // Returns the remainder of the line as an array of floats
    ParsedCommand.prototype.nextFloatArr = function () {
        if (this.index < this.contents.length) {
            var remainder = this.contents.slice(this.index++).map(function (val) { return parseFloat(val); });
            return remainder;
        }
        else {
            throw new Error("No more contents to consume from line");
        }
    };
    ParsedCommand.prototype.nextFloat = function () {
        var str = this._nextStr();
        return parseFloat(str);
    };
    // Returns the remainder of the line as an array of strings
    ParsedCommand.prototype.nextStrArr = function () {
        if (this.index < this.contents.length) {
            var remainder = this.contents.slice(this.index++);
            return remainder;
        }
        else {
            throw new Error("No more contents to consume from line");
        }
    };
    ParsedCommand.prototype.nextStr = function () {
        return this._nextStr();
    };
    return ParsedCommand;
}());
exports.ParsedCommand = ParsedCommand;
//# sourceMappingURL=index.js.map