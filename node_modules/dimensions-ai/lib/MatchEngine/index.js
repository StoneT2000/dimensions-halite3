"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var __1 = require("..");
var child_process_1 = require("child_process");
var __2 = require("../");
var log = new __1.Logger();
// All IO commands that are used for communication between `MatchEngine` and processes associated with `Agents`
var IO_COMMANDS;
(function (IO_COMMANDS) {
    IO_COMMANDS["MOVE_FNISH"] = "D_FINISH";
    IO_COMMANDS["MOVE_START"] = "D_START";
})(IO_COMMANDS = exports.IO_COMMANDS || (exports.IO_COMMANDS = {}));
/**
 * @class MatchEngine
 * @classdesc The Match Engine that takes a `Design` and starts matches by spawning new processes for each `Agent`
 * It returns results while a game is running and returns final results as well. Can start and stop the engine
 * Functionally runs matches as storing the match causes circular problems
 * (previously Match has Engine, Engine has Match)
 */
var MatchEngine = /** @class */ (function () {
    function MatchEngine(design, loggingLevel) {
        this.log = new __1.Logger();
        this.design = design;
        var _a = this.design.getDesignOptions(), commandStreamType = _a.commandStreamType, commandDelimiter = _a.commandDelimiter;
        this.engineOptions = {
            commandStreamType: commandStreamType,
            commandDelimiter: commandDelimiter
        };
        this.log.identifier = "Engine";
        this.setLogLevel(loggingLevel);
    }
    MatchEngine.prototype.setLogLevel = function (loggingLevel) {
        this.log.level = loggingLevel;
    };
    /**
     * Starts up the engine by intializing processes for all the agents and setting some variables for a match
     * @param agents
     */
    MatchEngine.prototype.initialize = function (agents, match) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                this.log.systembar();
                match.agents.forEach(function (agent, index) {
                    // spawn a process
                    _this.log.system("Setting up and spawning " + agent.name + (" | Command: " + agent.cmd + " " + agent.src));
                    // TODO: make this async and use promise
                    var p = child_process_1.spawn(agent.cmd, [agent.src]).on('error', function (err) { throw err; });
                    match.idToAgentsMap.set(agent.id, agent);
                    // set agent as running and resolve the currentMove for now
                    agent.status = __2.AgentStatus.RUNNING;
                    // handler for stdout of Agent processes. Stores their output commands and resolves move promises
                    p.stdout.on('data', function (data) {
                        // split chunks into line by line and handle each line of commands
                        ("" + data).split('\n').forEach(function (str) {
                            _this.log.system(agent.name + " - stdout: " + str);
                            // TODO: Implement parallel command stream type
                            // TODO: Implement timeout mechanism
                            if (_this.engineOptions.commandStreamType === __1.COMMAND_STREAM_TYPE.SEQUENTIAL) {
                                // IF SEQUENTIAL, we wait for each unit to finish their move and output their commands
                                if ("" + str === IO_COMMANDS.MOVE_FNISH) {
                                    // Resolve move and tell engine in `getCommands` this agent is done outputting commands and awaits input
                                    agent.currentMoveResolve();
                                    // stop the process for now from sending more output
                                    agent.process.kill('SIGSTOP');
                                }
                                else {
                                    agent.currentMoveCommands.push(str);
                                }
                            }
                            else if (_this.engineOptions.commandStreamType === __1.COMMAND_STREAM_TYPE.PARALLEL) {
                                // If PARALLEL, theres no waiting, we store commands immediately and resolve right away after each command
                                agent.currentMoveResolve();
                                // updates to match are first come first serve
                            }
                        });
                    });
                    p.stderr.on('data', function (data) {
                        _this.log.error(agent.id + ": " + data.slice(0, data.length - 1));
                    });
                    // when process closes, print message
                    p.on('close', function (code) {
                        _this.log.system(agent.name + " | id: " + agent.id + " - exited with code " + code);
                    });
                    // store process
                    agent.process = p;
                }, this);
                this.log.system('INITIALIZATION PROCESSES END\n');
                return [2 /*return*/, true];
            });
        });
    };
    MatchEngine.prototype.stop = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    // kills all agents and processes from a match and cleans up
    MatchEngine.prototype.killAndClean = function (match) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                match.agents.forEach(function (agent) {
                    agent.process.kill('SIGTERM');
                    agent.status = __2.AgentStatus.KILLED;
                });
                return [2 /*return*/];
            });
        });
    };
    /**
     * Returns a promise that resolves with all the commands loaded from the previous time step of the provided match
     * This coordinates all the Agents and waits for each one to finish their step
     */
    MatchEngine.prototype.getCommands = function (match) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        try {
                            var commands_1 = [];
                            var allAgentMovePromises = match.agents.map(function (agent) {
                                return agent.currentMovePromise;
                            });
                            Promise.all(allAgentMovePromises).then(function () {
                                match.agents.forEach(function (agent) {
                                    // TODO: Add option to store sets of commands delimited by '\n' for an Agent as different sets of commands /// for that Agent. Default right now is store every command delimited by the delimiter
                                    // for each set of commands delimited by '\n' in stdout of process, split it by delimiter and push to 
                                    // commands
                                    agent.currentMoveCommands.forEach(function (commandString) {
                                        commandString.split(_this.engineOptions.commandDelimiter).forEach(function (c) {
                                            // we don't accept '' as commands.
                                            if (c !== '') {
                                                commands_1.push({ command: c, agentID: agent.id });
                                            }
                                        });
                                    });
                                });
                                // once we collected all the commands, we now reset each Agent for the next move
                                match.agents.forEach(function (agent) {
                                    agent._setupMove();
                                });
                                _this.log.system("Agent commands at end of time step " + match.timeStep + " to be sent to match on time step " + (match.timeStep + 1) + " ");
                                _this.log.system(commands_1.length ? JSON.stringify(commands_1) : 'No commands');
                                resolve(commands_1);
                            });
                        }
                        catch (error) {
                            reject(error);
                        }
                    })];
            });
        });
    };
    // send a message in a match to a particular process governed by an Agent, resolves true if succesfully written
    MatchEngine.prototype.send = function (match, message, id) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var agent = match.idToAgentsMap.get(id);
                        agent.process.stdin.write(message + "\n", function (error) {
                            if (error)
                                reject(error);
                            resolve(true);
                        });
                    })];
            });
        });
    };
    return MatchEngine;
}());
exports.MatchEngine = MatchEngine;
//# sourceMappingURL=index.js.map